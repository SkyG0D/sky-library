plugins {
    id 'org.springframework.boot' version '2.3.7.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'net.ltgt.apt' version '0.20'
    id 'java'
}

apply plugin: 'net.ltgt.apt-idea'

group = 'sky.skygod'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

    integrationImplementation.extendsFrom testImplementation
    integrationRuntime.extendsFrom testRuntime
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation 'org.springframework.security:spring-security-jwt:1.0.9.RELEASE'
    implementation 'org.springframework.security.oauth:spring-security-oauth2:2.2.1.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'commons-io:commons-io:2.8.0'
    implementation 'org.projectlombok:lombok-mapstruct-binding:0.1.0'
    implementation 'org.mapstruct:mapstruct:1.4.0.Final'
    implementation 'org.projectlombok:lombok'
    implementation "io.springfox:springfox-boot-starter:3.0.0"
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.0.Final'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.1.0'
    testImplementation 'com.h2database:h2'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

sourceSets {
    integration {
        java.srcDir "$projectDir/src/integration/java"
        resources.srcDir "$projectDir/src/integration/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

test {
    useJUnitPlatform()
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
    useJUnitPlatform()
}

check.dependsOn integrationTest

task stage {
    dependsOn build
}
